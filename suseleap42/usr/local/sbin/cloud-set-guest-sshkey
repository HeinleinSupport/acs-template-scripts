#!/bin/bash 
#
# cloud-set-guest-sshkey    SSH Public Keys Download Client
#
# chkconfig: 2345 98 02
# description: SSH Public Keys Download Client
#
# ## systemd service file
# ## /etc/systemd/system/cloud-set-guest-sshkey.service
# #[Unit]
# #Description=Cloud Set Guest SSHKey Service
# #After=network.target
# #
# #[Service]
# #Type=oneshot
# #User=root
# #ExecStart=/usr/local/sbin/cloud-set-guest-sshkey
# #Restart=no
# #
# #[Install]
# #WantedBy=multi-user.target
# #

# Modify this line to specify the user (default is root)
user=vmadmin

uidname=$(id -nu $user)
gidname=$(id -ng $user)

### BEGIN INIT INFO
# Provides: cloud-set-guest-sshkey
# Required-Start: $local_fs $network $sshd
# Required-Stop: $local_fs $syslog
# Should-Start: $syslog
# Should-Stop: $network $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: 
# Description:       SSH Public Keys Download Client
### END INIT INFO

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_failed <num>  set local and overall rc status to <num><num>
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#


# Add your DHCP lease folders here
DHCP_FOLDERS="/var/lib/wicked/*"

keys_received=0
file_count=0

function cloud_set_guest_sshkey() {
    for DHCP_FILE in $DHCP_FOLDERS; do
        if [ -f $DHCP_FILE ]; then
            file_count=$((file_count+1))
            SSHKEY_SERVER_IP=$(grep '<server-address>' $DHCP_FILE | tail -1 | sed -s 's,<[^>]*>,,g;s, ,,g')

            if [ -n $SSHKEY_SERVER_IP ]; then
                logger -t "cloud" "Sending request to ssh key server at $SSHKEY_SERVER_IP"

                publickey=$(wget -t 3 -T 20 -O - http://$SSHKEY_SERVER_IP/latest/public-keys 2>/dev/null)

                if [ $? -eq 0 ]; then
                    logger -t "cloud" "Got response from server at $SSHKEY_SERVER_IP"
                    keys_received=1
                    break
                fi
            else
                logger -t "cloud" "Could not find ssh key server IP in $DHCP_FILE"
            fi
        fi
    done

    # did we find the keys anywhere?
    if [ "$keys_received" == "0" ]; then
        logger -t "cloud" "Failed to get ssh keys from any server"
        exit 1
    fi

    # set ssh public key
    homedir=$(grep ^$user /etc/passwd|awk -F ":" '{print $6}')
    sshdir=$homedir/.ssh
    authorized=$sshdir/authorized_keys

    if [ ! -e $sshdir ]; then
        mkdir $sshdir
	chown ${uidname}:${gidname} $sshdir
	chmod 0700 $sshdir
    fi

    if [ ! -e $authorized ]; then
        touch $authorized
	chown ${uidname}:${gidname} $authorized
	chmod 0600 $authorized
    fi

    if [ `grep -c "$publickey" $authorized` == 0 ]; then
            echo "$publickey" >> $authorized
            test -x /sbin/restorecon && /sbin/restorecon -R $homedir/.ssh
    fi
}

# See how we were called.
case "$1" in
  start)
      echo -n "Starting cloud-set-guest-sshkey: "
      cloud_set_guest_sshkey
      rc_status -v
    ;;
  stop)
      echo -n "Shutting down cloud-set-guest-sshkey: "
      rc_status -v
      ;;
  restart)
      $0 stop
      $0 start
      rc_status -v
      ;;
  *)
      echo $"Usage: cloud-set-guest-sshey {start}"
      exit 1
      ;;
esac

rc_exit

